{
  "hash": "8a1fc60a19858604abc6c1d606028249",
  "result": {
    "markdown": "---\ntitle: \"What Are the Best and Worst Days of the Week for Returns?\"\ndescription: \"Determine the best and worst days for returns for BIST100\"\nauthor: \"Uraz Akg√ºl\"\ndate: \"11/02/2022\"\ncategories: [Finance]\nimage: \"img.png\"\nexecute:\n  warning: false\n---\n\n\nDo stock returns differ depending on the day of the week? Let's use BIST100 returns to try to determine whether there is a difference.\n\nThe data you can access by downloading the *post1.xlsx* file from [here](https://github.com/urazakgul/handsonrpy/tree/main/posts/data) is from Reuters.\n\n# R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\nlibrary(lubridate)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(ggthemes)\nlibrary(scales)\nlibrary(ggrepel)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbist100 <- read_excel(\"data.xlsx\")\nbist100$DATE <- ymd(bist100$DATE)\n\n#head(bist100)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n|DATE       |    CLOSE|\n|:----------|--------:|\n|2002-12-31 | 103.6992|\n|2003-01-02 | 105.9858|\n|2003-01-03 | 108.3753|\n|2003-01-06 | 103.5734|\n|2003-01-07 |  97.5286|\n|2003-01-08 | 101.6121|\n:::\n:::\n\n\nHow to calculate rates of return:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbist100 <- bist100 %>%\nmutate(\n    DAY = weekdays(DATE)\n)\n\n#head(bist100)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n|DATE       |    CLOSE|DAY       |\n|:----------|--------:|:---------|\n|2002-12-31 | 103.6992|Tuesday   |\n|2003-01-02 | 105.9858|Thursday  |\n|2003-01-03 | 108.3753|Friday    |\n|2003-01-06 | 103.5734|Monday    |\n|2003-01-07 |  97.5286|Tuesday   |\n|2003-01-08 | 101.6121|Wednesday |\n:::\n:::\n\n\n$$\nr_i = \\frac{P_{t+1}-P_t}{P_t} = \\frac{P_{t+1}}{P_t} - 1\n$$\n\n$$\nr_i = Return\\ on\\ a\\ stock\\ i\n$$\n\n$$\nP_t = Price\\ of\\ the\\ stock\\ at\\ time\\ t\n$$\n\n$$\nP_{t+1} = Price\\ of\\ the\\ stock\\ at\\ time\\ t+1\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbist100 <- bist100 %>%\nmutate(\n    RETURN = lag(lead(CLOSE) / CLOSE - 1)\n) %>%\nna.omit()\n\n#head(bist100)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n|DATE       |    CLOSE|DAY       |     RETURN|\n|:----------|--------:|:---------|----------:|\n|2003-01-02 | 105.9858|Thursday  |  0.0220503|\n|2003-01-03 | 108.3753|Friday    |  0.0225455|\n|2003-01-06 | 103.5734|Monday    | -0.0443081|\n|2003-01-07 |  97.5286|Tuesday   | -0.0583625|\n|2003-01-08 | 101.6121|Wednesday |  0.0418698|\n|2003-01-09 | 102.2582|Thursday  |  0.0063585|\n:::\n:::\n\n\nThe mean and standard deviation of returns based on weekdays:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresult <- bist100 %>%\ngroup_by(DAY) %>%\nsummarise(\n    r_mean = mean(RETURN),\n    r_sd = sd(RETURN)\n) %>%\nungroup() %>%\nmutate(\n    DAY = factor(\n        DAY,\n        levels = c(\n            \"Monday\",\n            \"Tuesday\",\n            \"Wednesday\",\n            \"Thursday\",\n            \"Friday\"\n        )\n    )\n) %>%\narrange(DAY)\n\n#result\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n|DAY       |    r_mean|      r_sd|\n|:---------|---------:|---------:|\n|Monday    | 0.0010109| 0.0198846|\n|Tuesday   | 0.0008139| 0.0164530|\n|Wednesday | 0.0005155| 0.0155066|\n|Thursday  | 0.0009036| 0.0173621|\n|Friday    | 0.0011200| 0.0152668|\n:::\n:::\n\n\nBarplot (Average Returns):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(result, aes(x = DAY, y = r_mean, fill = r_mean)) +\ngeom_col() +\ntheme_fivethirtyeight() +\ntheme(\n    legend.position = \"none\",\n    plot.title = element_text(hjust = .5, size = 10)\n) +\nscale_fill_gradient(low = \"orange\", high = \"red\") +\nscale_y_continuous(labels = comma) +\nlabs(\n    title = \"What Are the Best and Worst Days of the Week for Returns for BIST100?\"\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nScatterplot (Average Returns vs Standard Deviations):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(result, aes(x = r_mean, y = r_sd)) +\ngeom_point(size = 5, alpha = .5) +\ngeom_text_repel(aes(label = DAY)) +\ntheme_fivethirtyeight() +\ntheme(\n    axis.title = element_text()\n) +\nscale_y_continuous(labels = comma) +\nscale_x_continuous(labels = comma) +\nlabs(\n    x = \"Average\",\n    y = \"Standard Deviation\"\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n# Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\n\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nplt.style.use('fivethirtyeight')\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n\nbist100 = pd.read_excel(\"data.xlsx\")\nbist100.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        DATE     CLOSE\n0 2002-12-31  103.6992\n1 2003-01-02  105.9858\n2 2003-01-03  108.3753\n3 2003-01-06  103.5734\n4 2003-01-07   97.5286\n```\n:::\n:::\n\n\nHow to calculate rates of return:\n\n\n::: {.cell}\n\n```{.python .cell-code}\n\nbist100['DAY'] = bist100['DATE'].dt.day_name()\nbist100.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        DATE     CLOSE       DAY\n0 2002-12-31  103.6992   Tuesday\n1 2003-01-02  105.9858  Thursday\n2 2003-01-03  108.3753    Friday\n3 2003-01-06  103.5734    Monday\n4 2003-01-07   97.5286   Tuesday\n```\n:::\n:::\n\n\n$$\nr_i = \\frac{P_{t+1}-P_t}{P_t} = \\frac{P_{t+1}}{P_t} - 1\n$$\n\n$$\nr_i = Return\\ on\\ a\\ stock\\ i\n$$\n\n$$\nP_t = Price\\ of\\ the\\ stock\\ at\\ time\\ t\n$$\n\n$$\nP_{t+1} = Price\\ of\\ the\\ stock\\ at\\ time\\ t+1\n$$\n\n\n::: {.cell}\n\n```{.python .cell-code}\n\nbist100['RETURN'] = bist100['CLOSE'].pct_change()\nbist100 = bist100.dropna()\nbist100.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        DATE     CLOSE        DAY    RETURN\n1 2003-01-02  105.9858   Thursday  0.022050\n2 2003-01-03  108.3753     Friday  0.022545\n3 2003-01-06  103.5734     Monday -0.044308\n4 2003-01-07   97.5286    Tuesday -0.058362\n5 2003-01-08  101.6121  Wednesday  0.041870\n```\n:::\n:::\n\n\nThe mean and standard deviation of returns based on weekdays:\n\n\n::: {.cell}\n\n```{.python .cell-code}\n\nr_mean = bist100.groupby('DAY')['RETURN'].mean()\nr_std = bist100.groupby('DAY')['RETURN'].std()\n\nresult = pd.DataFrame()\nresult['r_mean'] = r_mean\nresult['r_std'] = r_std\n\nresult.reset_index(inplace = True)\n\nresult['DAY'] = result['DAY'].astype(\"category\")\n\nday_list = [\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday'\n]\n\nresult['DAY'] = result['DAY'].cat.reorder_categories(day_list)\n\nresult['DAY']\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0       Friday\n1       Monday\n2     Thursday\n3      Tuesday\n4    Wednesday\nName: DAY, dtype: category\nCategories (5, object): ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\n```\n:::\n:::\n\n\nBarplot (Average Returns):\n\n\n::: {.cell}\n\n```{.python .cell-code}\n\nfig = plt.figure(figsize = (10, 7))\nbplt = sns.barplot(\n    x = 'DAY',\n    y = 'r_mean',\n    data = result,\n    palette = 'rocket'\n)\nbplt.set_title(\n    label = 'What Are the Best and Worst Days of the Week for Returns for BIST100?',\n    fontsize = 15\n)\nbplt.set_xlabel(xlabel = '')\nbplt.set_ylabel(ylabel = '')\nplt.show()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-1.png){width=960}\n:::\n:::\n\n\nScatterplot (Average Returns vs Standard Deviations):\n\n\n::: {.cell}\n\n```{.python .cell-code}\n\nday = result['DAY']\nr_mean_x = result['r_mean']\nr_std_y = result['r_std']\n\nfig = plt.figure(figsize = (10, 7))\nsplt = sns.scatterplot(\n    x = 'r_mean',\n    y = 'r_std',\n    data = result,\n    s = 150,\n    alpha = .5\n)\nfor i, day in enumerate (day):\n    plt.annotate(\n        day, (r_mean_x[i], r_std_y[i])\n    )\nsplt.set_xlabel(xlabel = 'Average', size = 8)\nsplt.set_ylabel(ylabel = 'Standard Deviation', size = 8)\nplt.show()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-3.png){width=960}\n:::\n:::",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}