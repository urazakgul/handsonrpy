[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I aim to teach R and Python programming languages with hands-on examples."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Uraz's R and Python Blog",
    "section": "",
    "text": "Finance\n\n\n\n\nDetermine the best and worst days for returns for BIST100\n\n\n\n\n\n\nNov 2, 2022\n\n\nUraz Akg√ºl\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/20221102_post1/index.html",
    "href": "posts/20221102_post1/index.html",
    "title": "What Are the Best and Worst Days of the Week for Returns?",
    "section": "",
    "text": "The data you can access by downloading the post1.xlsx file from here is from Reuters.\n\nR\n\nlibrary(readxl)\nlibrary(lubridate)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(ggthemes)\nlibrary(scales)\nlibrary(ggrepel)\n\n\nbist100 <- read_excel(\"data.xlsx\")\nbist100$DATE <- ymd(bist100$DATE)\n\n#head(bist100)\n\n\n\n\n\n\nDATE\nCLOSE\n\n\n\n\n2002-12-31\n103.6992\n\n\n2003-01-02\n105.9858\n\n\n2003-01-03\n108.3753\n\n\n2003-01-06\n103.5734\n\n\n2003-01-07\n97.5286\n\n\n2003-01-08\n101.6121\n\n\n\n\n\nHow to calculate rates of return:\n\nbist100 <- bist100 %>%\nmutate(\n    DAY = weekdays(DATE)\n)\n\n#head(bist100)\n\n\n\n\n\n\nDATE\nCLOSE\nDAY\n\n\n\n\n2002-12-31\n103.6992\nTuesday\n\n\n2003-01-02\n105.9858\nThursday\n\n\n2003-01-03\n108.3753\nFriday\n\n\n2003-01-06\n103.5734\nMonday\n\n\n2003-01-07\n97.5286\nTuesday\n\n\n2003-01-08\n101.6121\nWednesday\n\n\n\n\n\n\\[\nr_i = \\frac{P_{t+1}-P_t}{P_t} = \\frac{P_{t+1}}{P_t} - 1\n\\]\n\\[\nr_i = Return\\ on\\ a\\ stock\\ i\n\\]\n\\[\nP_t = Price\\ of\\ the\\ stock\\ at\\ time\\ t\n\\]\n\\[\nP_{t+1} = Price\\ of\\ the\\ stock\\ at\\ time\\ t+1\n\\]\n\nbist100 <- bist100 %>%\nmutate(\n    RETURN = lag(lead(CLOSE) / CLOSE - 1)\n) %>%\nna.omit()\n\n#head(bist100)\n\n\n\n\n\n\nDATE\nCLOSE\nDAY\nRETURN\n\n\n\n\n2003-01-02\n105.9858\nThursday\n0.0220503\n\n\n2003-01-03\n108.3753\nFriday\n0.0225455\n\n\n2003-01-06\n103.5734\nMonday\n-0.0443081\n\n\n2003-01-07\n97.5286\nTuesday\n-0.0583625\n\n\n2003-01-08\n101.6121\nWednesday\n0.0418698\n\n\n2003-01-09\n102.2582\nThursday\n0.0063585\n\n\n\n\n\nThe mean and standard deviation of returns based on weekdays:\n\nresult <- bist100 %>%\ngroup_by(DAY) %>%\nsummarise(\n    r_mean = mean(RETURN),\n    r_sd = sd(RETURN)\n) %>%\nungroup() %>%\nmutate(\n    DAY = factor(\n        DAY,\n        levels = c(\n            \"Monday\",\n            \"Tuesday\",\n            \"Wednesday\",\n            \"Thursday\",\n            \"Friday\"\n        )\n    )\n) %>%\narrange(DAY)\n\n#result\n\n\n\n\n\n\nDAY\nr_mean\nr_sd\n\n\n\n\nMonday\n0.0010109\n0.0198846\n\n\nTuesday\n0.0008139\n0.0164530\n\n\nWednesday\n0.0005155\n0.0155066\n\n\nThursday\n0.0009036\n0.0173621\n\n\nFriday\n0.0011200\n0.0152668\n\n\n\n\n\nBarplot (Average Returns):\n\nggplot(result, aes(x = DAY, y = r_mean, fill = r_mean)) +\ngeom_col() +\ntheme_fivethirtyeight() +\ntheme(\n    legend.position = \"none\",\n    plot.title = element_text(hjust = .5, size = 10)\n) +\nscale_fill_gradient(low = \"orange\", high = \"red\") +\nscale_y_continuous(labels = comma) +\nlabs(\n    title = \"What Are the Best and Worst Days of the Week for Returns for the BIST100?\"\n)\n\n\n\n\nScatterplot (Average Returns vs Standard Deviations):\n\nggplot(result, aes(x = r_mean, y = r_sd)) +\ngeom_point(size = 5, alpha = .5) +\ngeom_text_repel(aes(label = DAY)) +\ntheme_fivethirtyeight() +\ntheme(\n    axis.title = element_text()\n) +\nscale_y_continuous(labels = comma) +\nscale_x_continuous(labels = comma) +\nlabs(\n    x = \"Average\",\n    y = \"Standard Deviation\"\n)\n\n\n\n\n\n\nPython\n\n\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nplt.style.use('fivethirtyeight')\n\n\n\nbist100 = pd.read_excel(\"data.xlsx\")\nbist100.head()\n\n        DATE     CLOSE\n0 2002-12-31  103.6992\n1 2003-01-02  105.9858\n2 2003-01-03  108.3753\n3 2003-01-06  103.5734\n4 2003-01-07   97.5286\n\n\nHow to calculate rates of return:\n\n\nbist100['DAY'] = bist100['DATE'].dt.day_name()\nbist100.head()\n\n        DATE     CLOSE       DAY\n0 2002-12-31  103.6992   Tuesday\n1 2003-01-02  105.9858  Thursday\n2 2003-01-03  108.3753    Friday\n3 2003-01-06  103.5734    Monday\n4 2003-01-07   97.5286   Tuesday\n\n\n\\[\nr_i = \\frac{P_{t+1}-P_t}{P_t} = \\frac{P_{t+1}}{P_t} - 1\n\\]\n\\[\nr_i = Return\\ on\\ a\\ stock\\ i\n\\]\n\\[\nP_t = Price\\ of\\ the\\ stock\\ at\\ time\\ t\n\\]\n\\[\nP_{t+1} = Price\\ of\\ the\\ stock\\ at\\ time\\ t+1\n\\]\n\n\nbist100['RETURN'] = bist100['CLOSE'].pct_change()\nbist100 = bist100.dropna()\nbist100.head()\n\n        DATE     CLOSE        DAY    RETURN\n1 2003-01-02  105.9858   Thursday  0.022050\n2 2003-01-03  108.3753     Friday  0.022545\n3 2003-01-06  103.5734     Monday -0.044308\n4 2003-01-07   97.5286    Tuesday -0.058362\n5 2003-01-08  101.6121  Wednesday  0.041870\n\n\nThe mean and standard deviation of returns based on weekdays:\n\n\nr_mean = bist100.groupby('DAY')['RETURN'].mean()\nr_std = bist100.groupby('DAY')['RETURN'].std()\n\nresult = pd.DataFrame()\nresult['r_mean'] = r_mean\nresult['r_std'] = r_std\n\nresult.reset_index(inplace = True)\n\nresult['DAY'] = result['DAY'].astype(\"category\")\n\nday_list = [\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday'\n]\n\nresult['DAY'] = result['DAY'].cat.reorder_categories(day_list)\n\nresult['DAY']\n\n0       Friday\n1       Monday\n2     Thursday\n3      Tuesday\n4    Wednesday\nName: DAY, dtype: category\nCategories (5, object): ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\n\n\nBarplot (Average Returns):\n\n\nfig = plt.figure(figsize = (10, 7))\nbplt = sns.barplot(\n    x = 'DAY',\n    y = 'r_mean',\n    data = result,\n    palette = 'rocket'\n)\nbplt.set_title(\n    label = 'What Are the Best and Worst Days of the Week for Returns for the BIST100?',\n    fontsize = 15\n)\nbplt.set_xlabel(xlabel = '')\nbplt.set_ylabel(ylabel = '')\nplt.show()\n\n\n\n\nScatterplot (Average Returns vs Standard Deviations):\n\n\nday = result['DAY']\nr_mean_x = result['r_mean']\nr_std_y = result['r_std']\n\nfig = plt.figure(figsize = (10, 7))\nsplt = sns.scatterplot(\n    x = 'r_mean',\n    y = 'r_std',\n    data = result,\n    s = 150,\n    alpha = .5\n)\nfor i, day in enumerate (day):\n    plt.annotate(\n        day, (r_mean_x[i], r_std_y[i])\n    )\nsplt.set_xlabel(xlabel = 'Average', size = 8)\nsplt.set_ylabel(ylabel = 'Standard Deviation', size = 8)\nplt.show()"
  }
]