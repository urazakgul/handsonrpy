[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I aim to teach R and Python programming languages with hands-on examples."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Uraz's R and Python Blog",
    "section": "",
    "text": "Finance\n\n\nEnglish\n\n\n\n\nDetermine the best and worst days for returns for BIST100.\n\n\n\n\n\n\nNov 2, 2022\n\n\nUraz Akg√ºl\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/20221102_post1/index.html",
    "href": "posts/20221102_post1/index.html",
    "title": "What Are the Best and Worst Days of the Week for Returns?",
    "section": "",
    "text": "The data you can access by downloading the post1.xlsx file from here is from Reuters.\n\nR\n\nlibrary(readxl)\nlibrary(lubridate)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(ggthemes)\nlibrary(scales)\nlibrary(ggrepel)\n\n\nbist100 <- read_excel(\"data.xlsx\")\nbist100$DATE <- ymd(bist100$DATE)\n\n#head(bist100)\n\n\n\n\n\n\nDATE\nCLOSE\n\n\n\n\n2002-12-31\n103.6992\n\n\n2003-01-02\n105.9858\n\n\n2003-01-03\n108.3753\n\n\n2003-01-06\n103.5734\n\n\n2003-01-07\n97.5286\n\n\n2003-01-08\n101.6121\n\n\n\n\n\nHow to calculate rates of return:\n\nbist100 <- bist100 %>%\nmutate(\n    DAY = weekdays(DATE)\n)\n\n#head(bist100)\n\n\n\n\n\n\nDATE\nCLOSE\nDAY\n\n\n\n\n2002-12-31\n103.6992\nTuesday\n\n\n2003-01-02\n105.9858\nThursday\n\n\n2003-01-03\n108.3753\nFriday\n\n\n2003-01-06\n103.5734\nMonday\n\n\n2003-01-07\n97.5286\nTuesday\n\n\n2003-01-08\n101.6121\nWednesday\n\n\n\n\n\n\\[\nr_i = \\frac{P_{t+1}-P_t}{P_t} = \\frac{P_{t+1}}{P_t} - 1\n\\]\n\\[\nr_i = Return\\ on\\ a\\ stock\\ i\n\\]\n\\[\nP_t = Price\\ of\\ the\\ stock\\ at\\ time\\ t\n\\]\n\\[\nP_{t+1} = Price\\ of\\ the\\ stock\\ at\\ time\\ t+1\n\\]\n\nbist100 <- bist100 %>%\nmutate(\n    RETURN = lag(lead(CLOSE) / CLOSE - 1)\n) %>%\nna.omit()\n\n#head(bist100)\n\n\n\n\n\n\nDATE\nCLOSE\nDAY\nRETURN\n\n\n\n\n2003-01-02\n105.9858\nThursday\n0.0220503\n\n\n2003-01-03\n108.3753\nFriday\n0.0225455\n\n\n2003-01-06\n103.5734\nMonday\n-0.0443081\n\n\n2003-01-07\n97.5286\nTuesday\n-0.0583625\n\n\n2003-01-08\n101.6121\nWednesday\n0.0418698\n\n\n2003-01-09\n102.2582\nThursday\n0.0063585\n\n\n\n\n\nThe mean and standard deviation of returns based on weekdays:\n\nresult <- bist100 %>%\ngroup_by(DAY) %>%\nsummarise(\n    r_mean = mean(RETURN),\n    r_sd = sd(RETURN)\n) %>%\nungroup() %>%\nmutate(\n    DAY = factor(\n        DAY,\n        levels = c(\n            \"Monday\",\n            \"Tuesday\",\n            \"Wednesday\",\n            \"Thursday\",\n            \"Friday\"\n        )\n    )\n) %>%\narrange(DAY)\n\n#result\n\n\n\n\n\n\nDAY\nr_mean\nr_sd\n\n\n\n\nMonday\n0.0010109\n0.0198846\n\n\nTuesday\n0.0008139\n0.0164530\n\n\nWednesday\n0.0005155\n0.0155066\n\n\nThursday\n0.0009036\n0.0173621\n\n\nFriday\n0.0011200\n0.0152668\n\n\n\n\n\nBarplot (Average Returns):\n\nggplot(result, aes(x = DAY, y = r_mean, fill = r_mean)) +\ngeom_col() +\ntheme_fivethirtyeight() +\ntheme(\n    legend.position = \"none\",\n    plot.title = element_text(hjust = .5, size = 10)\n) +\nscale_fill_gradient(low = \"orange\", high = \"red\") +\nscale_y_continuous(labels = comma) +\nlabs(\n    title = \"What Are the Best and Worst Days of the Week for Returns for BIST100?\"\n)\n\n\n\n\nScatterplot (Average Returns vs Standard Deviations):\n\nggplot(result, aes(x = r_mean, y = r_sd)) +\ngeom_point(size = 5, alpha = .5) +\ngeom_text_repel(aes(label = DAY)) +\ntheme_fivethirtyeight() +\ntheme(\n    axis.title = element_text()\n) +\nscale_y_continuous(labels = comma) +\nscale_x_continuous(labels = comma) +\nlabs(\n    x = \"Average\",\n    y = \"Standard Deviation\"\n)\n\n\n\n\n\n\nPython\n\n\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nplt.style.use('fivethirtyeight')\n\n\n\nbist100 = pd.read_excel(\"data.xlsx\")\nbist100.head()\n\n        DATE     CLOSE\n0 2002-12-31  103.6992\n1 2003-01-02  105.9858\n2 2003-01-03  108.3753\n3 2003-01-06  103.5734\n4 2003-01-07   97.5286\n\n\nHow to calculate rates of return:\n\n\nbist100['DAY'] = bist100['DATE'].dt.day_name()\nbist100.head()\n\n        DATE     CLOSE       DAY\n0 2002-12-31  103.6992   Tuesday\n1 2003-01-02  105.9858  Thursday\n2 2003-01-03  108.3753    Friday\n3 2003-01-06  103.5734    Monday\n4 2003-01-07   97.5286   Tuesday\n\n\n\\[\nr_i = \\frac{P_{t+1}-P_t}{P_t} = \\frac{P_{t+1}}{P_t} - 1\n\\]\n\\[\nr_i = Return\\ on\\ a\\ stock\\ i\n\\]\n\\[\nP_t = Price\\ of\\ the\\ stock\\ at\\ time\\ t\n\\]\n\\[\nP_{t+1} = Price\\ of\\ the\\ stock\\ at\\ time\\ t+1\n\\]\n\n\nbist100['RETURN'] = bist100['CLOSE'].pct_change()\nbist100 = bist100.dropna()\nbist100.head()\n\n        DATE     CLOSE        DAY    RETURN\n1 2003-01-02  105.9858   Thursday  0.022050\n2 2003-01-03  108.3753     Friday  0.022545\n3 2003-01-06  103.5734     Monday -0.044308\n4 2003-01-07   97.5286    Tuesday -0.058362\n5 2003-01-08  101.6121  Wednesday  0.041870\n\n\nThe mean and standard deviation of returns based on weekdays:\n\n\nr_mean = bist100.groupby('DAY')['RETURN'].mean()\nr_std = bist100.groupby('DAY')['RETURN'].std()\n\nresult = pd.DataFrame()\nresult['r_mean'] = r_mean\nresult['r_std'] = r_std\n\nresult.reset_index(inplace = True)\n\nresult['DAY'] = result['DAY'].astype(\"category\")\n\nday_list = [\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday'\n]\n\nresult['DAY'] = result['DAY'].cat.reorder_categories(day_list)\n\nresult['DAY']\n\n0       Friday\n1       Monday\n2     Thursday\n3      Tuesday\n4    Wednesday\nName: DAY, dtype: category\nCategories (5, object): ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\n\n\nBarplot (Average Returns):\n\n\nfig = plt.figure(figsize = (10, 7))\nbplt = sns.barplot(\n    x = 'DAY',\n    y = 'r_mean',\n    data = result,\n    palette = 'rocket'\n)\nbplt.set_title(\n    label = 'What Are the Best and Worst Days of the Week for Returns for BIST100?',\n    fontsize = 15\n)\nbplt.set_xlabel(xlabel = '')\nbplt.set_ylabel(ylabel = '')\nplt.show()\n\n\n\n\nScatterplot (Average Returns vs Standard Deviations):\n\n\nday = result['DAY']\nr_mean_x = result['r_mean']\nr_std_y = result['r_std']\n\nfig = plt.figure(figsize = (10, 7))\nsplt = sns.scatterplot(\n    x = 'r_mean',\n    y = 'r_std',\n    data = result,\n    s = 150,\n    alpha = .5\n)\nfor i, day in enumerate (day):\n    plt.annotate(\n        day, (r_mean_x[i], r_std_y[i])\n    )\nsplt.set_xlabel(xlabel = 'Average', size = 8)\nsplt.set_ylabel(ylabel = 'Standard Deviation', size = 8)\nplt.show()"
  },
  {
    "objectID": "posts/20221115_post2/index.html",
    "href": "posts/20221115_post2/index.html",
    "title": "Key Steps Before Building a Model [Eligibility Prediction for Loan]",
    "section": "",
    "text": "I obtained the dataset for this post from Kaggle. You can also access it by downloading the post2.csv file from here.\n\nLoan_ID: Loan_ID\nGender: Male/Female\nMarried: Applicant married (Y/N)\nDependents: Number of dependents\nEducation: Applicant Education (Graduate/Under Graduate)\nSelf_Employed: Self employed (Y/N)\nApplicantIncome: Applicant income\nCoapplicantIncome: Coapplicant income\nLoanAmount: Loan amount in thousands\nLoan_Amount_Term: Term of loan in months\nCredit_History: Credit history meets guidelines\nProperty_Area: Urban/Semi Urban/Rural\nLoan_Status: (Target) Loan approved (Y/N)\n\n\nR\n\nlibrary(readxl)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(ggthemes)\n\n\ndt_loan <- read.csv(\"data.csv\")\n\n#head(dt_loan)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLoan_ID\nGender\nMarried\nDependents\nEducation\nSelf_Employed\nApplicantIncome\nCoapplicantIncome\nLoanAmount\nLoan_Amount_Term\nCredit_History\nProperty_Area\nLoan_Status\n\n\n\n\nLP001002\nMale\nNo\n0\nGraduate\nNo\n5849\n0\nNA\n360\n1\nUrban\nY\n\n\nLP001003\nMale\nYes\n1\nGraduate\nNo\n4583\n1508\n128\n360\n1\nRural\nN\n\n\nLP001005\nMale\nYes\n0\nGraduate\nYes\n3000\n0\n66\n360\n1\nUrban\nY\n\n\nLP001006\nMale\nYes\n0\nNot Graduate\nNo\n2583\n2358\n120\n360\n1\nUrban\nY\n\n\nLP001008\nMale\nNo\n0\nGraduate\nNo\n6000\n0\n141\n360\n1\nUrban\nY\n\n\nLP001011\nMale\nYes\n2\nGraduate\nYes\n5417\n4196\n267\n360\n1\nUrban\nY\n\n\n\n\n\n\nThe total number of rows:\n\n\nnrow(dt_loan)\n\n[1] 614\n\n\n\nAre there customers with similar IDs? If so which one or which ones?\n\n\nlength(unique(dt_loan$Loan_ID)) == nrow(dt_loan)\n\n[1] TRUE\n\n\n\nGender: Male/Female\n\n\ndt_loan %>%\ncount(Gender) %>%\nmutate(p = n / sum(n) * 100)\n\n  Gender   n         p\n1         13  2.117264\n2 Female 112 18.241042\n3   Male 489 79.641694\n\ndt_loan %>%\ncount(Gender) %>%\nggplot(aes(x = Gender, y = n, fill = Gender)) +\ngeom_col() +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\")\n\n\n\n\nThe gender of 13 customers is unknown. The majority of applicants are males.\nRemove 13 customers whose gender is unknown from the dataset.\n\ndt_loan <- dt_loan %>%\nfilter(Gender != \"\")\n\nnrow(dt_loan)\n\n[1] 601\n\n\n\nMarried: Applicant married (Y/N)\n\n\ndt_loan %>%\ncount(Married) %>%\nmutate(p = n / sum(n) * 100)\n\n  Married   n          p\n1           3  0.4991681\n2      No 210 34.9417637\n3     Yes 388 64.5590682\n\ndt_loan %>%\ncount(Married) %>%\nggplot(aes(x = Married, y = n, fill = Married)) +\ngeom_col() +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\")\n\n\n\n\nIt is unknown whether the 3 customers are married. One-third of those who apply are married.\nRemove 3 customers whose marital status is unknown from the dataset.\n\ndt_loan <- dt_loan %>%\nfilter(Married != \"\")\n\nnrow(dt_loan)\n\n[1] 598\n\n\n\nDependents: Number of dependents\n\n\ndt_loan %>%\ncount(Dependents) %>%\nmutate(p = n / sum(n) * 100)\n\n  Dependents   n         p\n1             12  2.006689\n2          0 338 56.521739\n3          1 101 16.889632\n4          2  99 16.555184\n5         3+  48  8.026756\n\ndt_loan %>%\ncount(Dependents) %>%\nggplot(aes(x = Dependents, y = n, fill = Dependents)) +\ngeom_col() +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\")\n\n\n\n\nThe dependent information of 12 customers is unknown. A little more than half of those who applied have no dependents.\nRemove 12 customers who do not have information about their dependents from the data set.\nc\n\nEducation: Applicant Education (Graduate/Under Graduate)\n\n\ndt_loan %>%\ncount(Education) %>%\nmutate(p = n / sum(n) * 100)\n\n     Education   n       p\n1     Graduate 465 77.7592\n2 Not Graduate 133 22.2408\n\ndt_loan %>%\ncount(Education) %>%\nggplot(aes(x = Education, y = n, fill = Education)) +\ngeom_col() +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\")\n\n\n\n\nIn this category, all customers have educational information. Most applicants hold graduate degrees.\n\nSelf_Employed: Self employed (Y/N)\n\n\ndt_loan %>%\ncount(Self_Employed) %>%\nmutate(p = n / sum(n) * 100)\n\n  Self_Employed   n         p\n1                32  5.351171\n2            No 488 81.605351\n3           Yes  78 13.043478\n\ndt_loan %>%\ncount(Self_Employed) %>%\nggplot(aes(x = Self_Employed, y = n, fill = Self_Employed)) +\ngeom_col() +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\")\n\n\n\n\nThere is no information on whether 32 customers are self-employed. The vast majority of applicants are not self-employed.\nRemove 32 customers from the dataset, whether or not they are self-employed.\n\ndt_loan <- dt_loan %>%\nfilter(Self_Employed != \"\")\n\nnrow(dt_loan)\n\n[1] 566\n\n\n\nApplicantIncome: Applicant income\n\n\ndt_loan %>%\nsummarise(\n  min = min(ApplicantIncome),\n  max = max(ApplicantIncome),\n  mean = mean(ApplicantIncome),\n  median = median(ApplicantIncome),\n  sd = sd(ApplicantIncome)\n)\n\n  min   max     mean median       sd\n1 150 81000 5259.972 3839.5 5412.902\n\nggplot(dt_loan, aes(x = ApplicantIncome)) +\ngeom_histogram(aes(y = ..density..), fill = \"orange\") +\ngeom_density(size = 1) +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\") +\ntheme(axis.text.y = element_blank())\n\n\n\n\n\nCoapplicantIncome: Coapplicant income\n\n\ndt_loan %>%\nsummarise(\n  min = min(CoapplicantIncome),\n  max = max(CoapplicantIncome),\n  mean = mean(CoapplicantIncome),\n  median = median(CoapplicantIncome),\n  sd = sd(CoapplicantIncome)\n)\n\n  min   max     mean median       sd\n1   0 33837 1579.147   1149 2507.244\n\nggplot(dt_loan, aes(x = CoapplicantIncome)) +\ngeom_histogram(aes(y = ..density..), fill = \"orange\") +\ngeom_density(size = 1) +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\") +\ntheme(axis.text.y = element_blank())\n\n\n\n\n\nLoanAmount: Loan amount in thousands\n\n\ndt_loan %>%\nsummarise(\n  min = min(LoanAmount),\n  max = max(LoanAmount),\n  mean = mean(LoanAmount),\n  median = median(LoanAmount),\n  sd = sd(LoanAmount)\n)\n\n  min max mean median sd\n1  NA  NA   NA     NA NA\n\nggplot(dt_loan, aes(x = LoanAmount)) +\ngeom_histogram(aes(y = ..density..), fill = \"orange\") +\ngeom_density(size = 1) +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\") +\ntheme(axis.text.y = element_blank())\n\n\n\n\n\nLoan_Amount_Term: Term of loan in months\n\n\ndt_loan %>%\ncount(Loan_Amount_Term) %>%\nmutate(p = n / sum(n) * 100)\n\n   Loan_Amount_Term   n          p\n1                12   1  0.1766784\n2                36   2  0.3533569\n3                60   2  0.3533569\n4                84   4  0.7067138\n5               120   3  0.5300353\n6               180  39  6.8904594\n7               240   3  0.5300353\n8               300  12  2.1201413\n9               360 473 83.5689046\n10              480  14  2.4734982\n11               NA  13  2.2968198\n\ndt_loan %>%\ncount(Loan_Amount_Term) %>%\nggplot(aes(x = Loan_Amount_Term, y = n, fill = Loan_Amount_Term)) +\ngeom_col() +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\")\n\n\n\n\n\nCredit_History: Credit history meets guidelines\n\n\ndt_loan %>%\ncount(Credit_History) %>%\nmutate(p = n / sum(n) * 100)\n\n  Credit_History   n         p\n1              0  85 15.017668\n2              1 438 77.385159\n3             NA  43  7.597173\n\ndt_loan %>%\ncount(Credit_History) %>%\nggplot(aes(x = Credit_History, y = n, fill = Credit_History)) +\ngeom_col() +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\")\n\n\n\n\n\nProperty_Area: Urban/Semi Urban/Rural\n\n\ndt_loan %>%\ncount(Property_Area) %>%\nmutate(p = n / sum(n) * 100)\n\n  Property_Area   n        p\n1         Rural 165 29.15194\n2     Semiurban 215 37.98587\n3         Urban 186 32.86219\n\ndt_loan %>%\ncount(Property_Area) %>%\nggplot(aes(x = Property_Area, y = n, fill = Property_Area)) +\ngeom_col() +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\")\n\n\n\n\n\nLoan_Status: (Target) Loan approved (Y/N)\n\n\ndt_loan %>%\ncount(Loan_Status) %>%\nmutate(p = n / sum(n) * 100)\n\n  Loan_Status   n        p\n1           N 178 31.44876\n2           Y 388 68.55124\n\ndt_loan %>%\ncount(Loan_Status) %>%\nggplot(aes(x = Loan_Status, y = n, fill = Loan_Status)) +\ngeom_col() +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\")"
  },
  {
    "objectID": "posts/20221116_post2/index.html",
    "href": "posts/20221116_post2/index.html",
    "title": "Key Steps Before Building a Model [Eligibility Prediction for Loan]",
    "section": "",
    "text": "I obtained the dataset for this post from Kaggle. You can also access it by downloading the post2.csv file from here.\n\nLoan_ID: Loan_ID\nGender: Male/Female\nMarried: Applicant married (Y/N)\nDependents: Number of dependents\nEducation: Applicant Education (Graduate/Under Graduate)\nSelf_Employed: Self employed (Y/N)\nApplicantIncome: Applicant income\nCoapplicantIncome: Coapplicant income\nLoanAmount: Loan amount in thousands\nLoan_Amount_Term: Term of loan in months\nCredit_History: Credit history meets guidelines\nProperty_Area: Urban/Semi Urban/Rural\nLoan_Status: (Target) Loan approved (Y/N)\n\n\nR\n\nlibrary(readxl)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(ggthemes)\n\n\ndt_loan <- read.csv(\"data.csv\")\n\n#head(dt_loan)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLoan_ID\nGender\nMarried\nDependents\nEducation\nSelf_Employed\nApplicantIncome\nCoapplicantIncome\nLoanAmount\nLoan_Amount_Term\nCredit_History\nProperty_Area\nLoan_Status\n\n\n\n\nLP001002\nMale\nNo\n0\nGraduate\nNo\n5849\n0\nNA\n360\n1\nUrban\nY\n\n\nLP001003\nMale\nYes\n1\nGraduate\nNo\n4583\n1508\n128\n360\n1\nRural\nN\n\n\nLP001005\nMale\nYes\n0\nGraduate\nYes\n3000\n0\n66\n360\n1\nUrban\nY\n\n\nLP001006\nMale\nYes\n0\nNot Graduate\nNo\n2583\n2358\n120\n360\n1\nUrban\nY\n\n\nLP001008\nMale\nNo\n0\nGraduate\nNo\n6000\n0\n141\n360\n1\nUrban\nY\n\n\nLP001011\nMale\nYes\n2\nGraduate\nYes\n5417\n4196\n267\n360\n1\nUrban\nY\n\n\n\n\n\n\nThe total number of rows:\n\nnrow(dt_loan)\n\n[1] 614\n\n\n\n\nAre there customers with similar IDs? If so which one or which ones?\n\nlength(unique(dt_loan$Loan_ID)) == nrow(dt_loan)\n\n[1] TRUE\n\n\n\n\nGender: Male/Female\n\ndt_loan %>%\ncount(Gender) %>%\nmutate(p = n / sum(n) * 100)\n\n  Gender   n         p\n1         13  2.117264\n2 Female 112 18.241042\n3   Male 489 79.641694\n\ndt_loan %>%\ncount(Gender) %>%\nggplot(aes(x = Gender, y = n, fill = Gender)) +\ngeom_col() +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\")\n\n\n\n\nThe gender of 13 customers is unknown. The majority of applicants are males.\nRemove 13 customers whose gender is unknown from the dataset.\n\ndt_loan <- dt_loan %>%\nfilter(Gender != \"\")\n\nnrow(dt_loan)\n\n[1] 601\n\n\n\n\nMarried: Applicant married (Y/N)\n\ndt_loan %>%\ncount(Married) %>%\nmutate(p = n / sum(n) * 100)\n\n  Married   n          p\n1           3  0.4991681\n2      No 210 34.9417637\n3     Yes 388 64.5590682\n\ndt_loan %>%\ncount(Married) %>%\nggplot(aes(x = Married, y = n, fill = Married)) +\ngeom_col() +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\")\n\n\n\n\nIt is unknown whether the 3 customers are married. One-third of those who apply are married.\nRemove 3 customers whose marital status is unknown from the dataset.\n\ndt_loan <- dt_loan %>%\nfilter(Married != \"\")\n\nnrow(dt_loan)\n\n[1] 598\n\n\n\n\nDependents: Number of dependents\n\ndt_loan %>%\ncount(Dependents) %>%\nmutate(p = n / sum(n) * 100)\n\n  Dependents   n         p\n1             12  2.006689\n2          0 338 56.521739\n3          1 101 16.889632\n4          2  99 16.555184\n5         3+  48  8.026756\n\ndt_loan %>%\ncount(Dependents) %>%\nggplot(aes(x = Dependents, y = n, fill = Dependents)) +\ngeom_col() +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\")\n\n\n\n\nThe dependent information of 12 customers is unknown. A little more than half of those who applied have no dependents.\nRemove 12 customers who do not have information about their dependents from the data set.\n\ndt_loan <- dt_loan %>%\nfilter(Dependents != \"\")\n\nnrow(dt_loan)\n\n[1] 586\n\n\n\n\nEducation: Applicant Education (Graduate/Under Graduate)\n\ndt_loan %>%\ncount(Education) %>%\nmutate(p = n / sum(n) * 100)\n\n     Education   n        p\n1     Graduate 457 77.98635\n2 Not Graduate 129 22.01365\n\ndt_loan %>%\ncount(Education) %>%\nggplot(aes(x = Education, y = n, fill = Education)) +\ngeom_col() +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\")\n\n\n\n\nIn this category, all customers have educational information. Most applicants hold graduate degrees.\n\n\nSelf_Employed: Self employed (Y/N)\n\ndt_loan %>%\ncount(Self_Employed) %>%\nmutate(p = n / sum(n) * 100)\n\n  Self_Employed   n         p\n1                32  5.460751\n2            No 478 81.569966\n3           Yes  76 12.969283\n\ndt_loan %>%\ncount(Self_Employed) %>%\nggplot(aes(x = Self_Employed, y = n, fill = Self_Employed)) +\ngeom_col() +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\")\n\n\n\n\nThere is no information on whether 32 customers are self-employed. The vast majority of applicants are not self-employed.\nRemove 32 customers from the dataset, whether or not they are self-employed.\n\ndt_loan <- dt_loan %>%\nfilter(Self_Employed != \"\")\n\nnrow(dt_loan)\n\n[1] 554\n\n\n\n\nApplicantIncome: Applicant income\n\ndt_loan %>%\nsummarise(\n  min = min(ApplicantIncome),\n  max = max(ApplicantIncome),\n  mean = mean(ApplicantIncome),\n  median = median(ApplicantIncome),\n  sd = sd(ApplicantIncome)\n)\n\n  min   max    mean median       sd\n1 150 81000 5267.06 3839.5 5455.163\n\nggplot(dt_loan, aes(x = ApplicantIncome)) +\ngeom_histogram(aes(y = ..density..), fill = \"orange\") +\ngeom_density(size = 1) +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\") +\ntheme(axis.text.y = element_blank())\n\n\n\n\n\n\nCoapplicantIncome: Coapplicant income\n\ndt_loan %>%\nsummarise(\n  min = min(CoapplicantIncome),\n  max = max(CoapplicantIncome),\n  mean = mean(CoapplicantIncome),\n  median = median(CoapplicantIncome),\n  sd = sd(CoapplicantIncome)\n)\n\n  min   max     mean median       sd\n1   0 33837 1585.576   1149 2524.485\n\nggplot(dt_loan, aes(x = CoapplicantIncome)) +\ngeom_histogram(aes(y = ..density..), fill = \"orange\") +\ngeom_density(size = 1) +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\") +\ntheme(axis.text.y = element_blank())\n\n\n\n\n\n\nLoanAmount: Loan amount in thousands\n\ndt_loan %>%\nsummarise(\n  min = min(LoanAmount),\n  max = max(LoanAmount),\n  mean = mean(LoanAmount),\n  median = median(LoanAmount),\n  sd = sd(LoanAmount)\n)\n\n  min max mean median sd\n1  NA  NA   NA     NA NA\n\nggplot(dt_loan, aes(x = LoanAmount)) +\ngeom_histogram(aes(y = ..density..), fill = \"orange\") +\ngeom_density(size = 1) +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\") +\ntheme(axis.text.y = element_blank())\n\n\n\n\nWe are unable to calculate summary statistics because some customers do not have a loan amount or LoanAmount.\n\ndt_loan <- dt_loan %>%\nfilter(LoanAmount != \"\")\n\ndt_loan %>%\nsummarise(\n  min = min(LoanAmount),\n  max = max(LoanAmount),\n  mean = mean(LoanAmount),\n  median = median(LoanAmount),\n  sd = sd(LoanAmount)\n)\n\n  min max     mean median       sd\n1   9 650 144.9178    127 82.50775\n\nnrow(dt_loan)\n\n[1] 535\n\n\n\n\nLoan_Amount_Term: Term of loan in months\n\ndt_loan %>%\ncount(Loan_Amount_Term) %>%\nmutate(p = n / sum(n) * 100)\n\n   Loan_Amount_Term   n          p\n1                12   1  0.1869159\n2                36   2  0.3738318\n3                60   2  0.3738318\n4                84   4  0.7476636\n5               120   3  0.5607477\n6               180  36  6.7289720\n7               240   3  0.5607477\n8               300  12  2.2429907\n9               360 447 83.5514019\n10              480  13  2.4299065\n11               NA  12  2.2429907\n\ndt_loan %>%\ncount(Loan_Amount_Term) %>%\nggplot(aes(x = Loan_Amount_Term, y = n, fill = Loan_Amount_Term)) +\ngeom_col() +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\")\n\n\n\n\n12 customers do not have Loan_Amount_Term information.\n\ndt_loan <- dt_loan %>%\nfilter(!is.na(Loan_Amount_Term))\n\nnrow(dt_loan)\n\n[1] 523\n\n\n\n\nCredit_History: Credit history meets guidelines\n\ndt_loan %>%\ncount(Credit_History) %>%\nmutate(p = n / sum(n) * 100)\n\n  Credit_History   n         p\n1              0  70 13.384321\n2              1 410 78.393881\n3             NA  43  8.221797\n\ndt_loan %>%\ncount(Credit_History) %>%\nggplot(aes(x = Credit_History, y = n, fill = Credit_History)) +\ngeom_col() +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\")\n\n\n\n\n\n\nProperty_Area: Urban/Semi Urban/Rural\n\ndt_loan %>%\ncount(Property_Area) %>%\nmutate(p = n / sum(n) * 100)\n\n  Property_Area   n        p\n1         Rural 153 29.25430\n2     Semiurban 205 39.19694\n3         Urban 165 31.54876\n\ndt_loan %>%\ncount(Property_Area) %>%\nggplot(aes(x = Property_Area, y = n, fill = Property_Area)) +\ngeom_col() +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\")\n\n\n\n\n\n\nLoan_Status: (Target) Loan approved (Y/N)\n\ndt_loan %>%\ncount(Loan_Status) %>%\nmutate(p = n / sum(n) * 100)\n\n  Loan_Status   n        p\n1           N 156 29.82792\n2           Y 367 70.17208\n\ndt_loan %>%\ncount(Loan_Status) %>%\nggplot(aes(x = Loan_Status, y = n, fill = Loan_Status)) +\ngeom_col() +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\")"
  },
  {
    "objectID": "posts/20221116_post2/index.html#the-total-number-of-rows",
    "href": "posts/20221116_post2/index.html#the-total-number-of-rows",
    "title": "Key Steps Before Building a Model [Eligibility Prediction for Loan]",
    "section": "The total number of rows:",
    "text": "The total number of rows:\n\nnrow(dt_loan)\n\n[1] 614\n\n\n\nAre there customers with similar IDs? If so which one or which ones?\n\n\nlength(unique(dt_loan$Loan_ID)) == nrow(dt_loan)\n\n[1] TRUE\n\n\n\nGender: Male/Female\n\n\ndt_loan %>%\ncount(Gender) %>%\nmutate(p = n / sum(n) * 100)\n\n  Gender   n         p\n1         13  2.117264\n2 Female 112 18.241042\n3   Male 489 79.641694\n\ndt_loan %>%\ncount(Gender) %>%\nggplot(aes(x = Gender, y = n, fill = Gender)) +\ngeom_col() +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\")\n\n\n\n\nThe gender of 13 customers is unknown. The majority of applicants are males.\nRemove 13 customers whose gender is unknown from the dataset.\n\ndt_loan <- dt_loan %>%\nfilter(Gender != \"\")\n\nnrow(dt_loan)\n\n[1] 601\n\n\n\nMarried: Applicant married (Y/N)\n\n\ndt_loan %>%\ncount(Married) %>%\nmutate(p = n / sum(n) * 100)\n\n  Married   n          p\n1           3  0.4991681\n2      No 210 34.9417637\n3     Yes 388 64.5590682\n\ndt_loan %>%\ncount(Married) %>%\nggplot(aes(x = Married, y = n, fill = Married)) +\ngeom_col() +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\")\n\n\n\n\nIt is unknown whether the 3 customers are married. One-third of those who apply are married.\nRemove 3 customers whose marital status is unknown from the dataset.\n\ndt_loan <- dt_loan %>%\nfilter(Married != \"\")\n\nnrow(dt_loan)\n\n[1] 598\n\n\n\nDependents: Number of dependents\n\n\ndt_loan %>%\ncount(Dependents) %>%\nmutate(p = n / sum(n) * 100)\n\n  Dependents   n         p\n1             12  2.006689\n2          0 338 56.521739\n3          1 101 16.889632\n4          2  99 16.555184\n5         3+  48  8.026756\n\ndt_loan %>%\ncount(Dependents) %>%\nggplot(aes(x = Dependents, y = n, fill = Dependents)) +\ngeom_col() +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\")\n\n\n\n\nThe dependent information of 12 customers is unknown. A little more than half of those who applied have no dependents.\nRemove 12 customers who do not have information about their dependents from the data set.\nc\n\nEducation: Applicant Education (Graduate/Under Graduate)\n\n\ndt_loan %>%\ncount(Education) %>%\nmutate(p = n / sum(n) * 100)\n\n     Education   n       p\n1     Graduate 465 77.7592\n2 Not Graduate 133 22.2408\n\ndt_loan %>%\ncount(Education) %>%\nggplot(aes(x = Education, y = n, fill = Education)) +\ngeom_col() +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\")\n\n\n\n\nIn this category, all customers have educational information. Most applicants hold graduate degrees.\n\nSelf_Employed: Self employed (Y/N)\n\n\ndt_loan %>%\ncount(Self_Employed) %>%\nmutate(p = n / sum(n) * 100)\n\n  Self_Employed   n         p\n1                32  5.351171\n2            No 488 81.605351\n3           Yes  78 13.043478\n\ndt_loan %>%\ncount(Self_Employed) %>%\nggplot(aes(x = Self_Employed, y = n, fill = Self_Employed)) +\ngeom_col() +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\")\n\n\n\n\nThere is no information on whether 32 customers are self-employed. The vast majority of applicants are not self-employed.\nRemove 32 customers from the dataset, whether or not they are self-employed.\n\ndt_loan <- dt_loan %>%\nfilter(Self_Employed != \"\")\n\nnrow(dt_loan)\n\n[1] 566\n\n\n\nApplicantIncome: Applicant income\n\n\ndt_loan %>%\nsummarise(\n  min = min(ApplicantIncome),\n  max = max(ApplicantIncome),\n  mean = mean(ApplicantIncome),\n  median = median(ApplicantIncome),\n  sd = sd(ApplicantIncome)\n)\n\n  min   max     mean median       sd\n1 150 81000 5259.972 3839.5 5412.902\n\nggplot(dt_loan, aes(x = ApplicantIncome)) +\ngeom_histogram(aes(y = ..density..), fill = \"orange\") +\ngeom_density(size = 1) +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\") +\ntheme(axis.text.y = element_blank())\n\n\n\n\n\nCoapplicantIncome: Coapplicant income\n\n\ndt_loan %>%\nsummarise(\n  min = min(CoapplicantIncome),\n  max = max(CoapplicantIncome),\n  mean = mean(CoapplicantIncome),\n  median = median(CoapplicantIncome),\n  sd = sd(CoapplicantIncome)\n)\n\n  min   max     mean median       sd\n1   0 33837 1579.147   1149 2507.244\n\nggplot(dt_loan, aes(x = CoapplicantIncome)) +\ngeom_histogram(aes(y = ..density..), fill = \"orange\") +\ngeom_density(size = 1) +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\") +\ntheme(axis.text.y = element_blank())\n\n\n\n\n\nLoanAmount: Loan amount in thousands\n\n\ndt_loan %>%\nsummarise(\n  min = min(LoanAmount),\n  max = max(LoanAmount),\n  mean = mean(LoanAmount),\n  median = median(LoanAmount),\n  sd = sd(LoanAmount)\n)\n\n  min max mean median sd\n1  NA  NA   NA     NA NA\n\nggplot(dt_loan, aes(x = LoanAmount)) +\ngeom_histogram(aes(y = ..density..), fill = \"orange\") +\ngeom_density(size = 1) +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\") +\ntheme(axis.text.y = element_blank())\n\n\n\n\n\nLoan_Amount_Term: Term of loan in months\n\n\ndt_loan %>%\ncount(Loan_Amount_Term) %>%\nmutate(p = n / sum(n) * 100)\n\n   Loan_Amount_Term   n          p\n1                12   1  0.1766784\n2                36   2  0.3533569\n3                60   2  0.3533569\n4                84   4  0.7067138\n5               120   3  0.5300353\n6               180  39  6.8904594\n7               240   3  0.5300353\n8               300  12  2.1201413\n9               360 473 83.5689046\n10              480  14  2.4734982\n11               NA  13  2.2968198\n\ndt_loan %>%\ncount(Loan_Amount_Term) %>%\nggplot(aes(x = Loan_Amount_Term, y = n, fill = Loan_Amount_Term)) +\ngeom_col() +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\")\n\n\n\n\n\nCredit_History: Credit history meets guidelines\n\n\ndt_loan %>%\ncount(Credit_History) %>%\nmutate(p = n / sum(n) * 100)\n\n  Credit_History   n         p\n1              0  85 15.017668\n2              1 438 77.385159\n3             NA  43  7.597173\n\ndt_loan %>%\ncount(Credit_History) %>%\nggplot(aes(x = Credit_History, y = n, fill = Credit_History)) +\ngeom_col() +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\")\n\n\n\n\n\nProperty_Area: Urban/Semi Urban/Rural\n\n\ndt_loan %>%\ncount(Property_Area) %>%\nmutate(p = n / sum(n) * 100)\n\n  Property_Area   n        p\n1         Rural 165 29.15194\n2     Semiurban 215 37.98587\n3         Urban 186 32.86219\n\ndt_loan %>%\ncount(Property_Area) %>%\nggplot(aes(x = Property_Area, y = n, fill = Property_Area)) +\ngeom_col() +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\")\n\n\n\n\n\nLoan_Status: (Target) Loan approved (Y/N)\n\n\ndt_loan %>%\ncount(Loan_Status) %>%\nmutate(p = n / sum(n) * 100)\n\n  Loan_Status   n        p\n1           N 178 31.44876\n2           Y 388 68.55124\n\ndt_loan %>%\ncount(Loan_Status) %>%\nggplot(aes(x = Loan_Status, y = n, fill = Loan_Status)) +\ngeom_col() +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\")"
  },
  {
    "objectID": "posts/20221118_post2/index.html",
    "href": "posts/20221118_post2/index.html",
    "title": "Key Steps Before Building a Model [Eligibility Prediction for Loan]",
    "section": "",
    "text": "I obtained the dataset for this post from Kaggle. You can also access it by downloading the post2.csv file from here.\n\nLoan_ID: Loan_ID\nGender: Male/Female\nMarried: Applicant married (Y/N)\nDependents: Number of dependents\nEducation: Applicant Education (Graduate/Under Graduate)\nSelf_Employed: Self employed (Y/N)\nApplicantIncome: Applicant income\nCoapplicantIncome: Coapplicant income\nLoanAmount: Loan amount in thousands\nLoan_Amount_Term: Term of loan in months\nCredit_History: Credit history meets guidelines\nProperty_Area: Urban/Semi Urban/Rural\nLoan_Status: (Target) Loan approved (Y/N)\n\n\nR\n\nlibrary(readxl)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(ggthemes)\n\n\ndt_loan <- read.csv(\"data.csv\")\n\n#head(dt_loan)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLoan_ID\nGender\nMarried\nDependents\nEducation\nSelf_Employed\nApplicantIncome\nCoapplicantIncome\nLoanAmount\nLoan_Amount_Term\nCredit_History\nProperty_Area\nLoan_Status\n\n\n\n\nLP001002\nMale\nNo\n0\nGraduate\nNo\n5849\n0\nNA\n360\n1\nUrban\nY\n\n\nLP001003\nMale\nYes\n1\nGraduate\nNo\n4583\n1508\n128\n360\n1\nRural\nN\n\n\nLP001005\nMale\nYes\n0\nGraduate\nYes\n3000\n0\n66\n360\n1\nUrban\nY\n\n\nLP001006\nMale\nYes\n0\nNot Graduate\nNo\n2583\n2358\n120\n360\n1\nUrban\nY\n\n\nLP001008\nMale\nNo\n0\nGraduate\nNo\n6000\n0\n141\n360\n1\nUrban\nY\n\n\nLP001011\nMale\nYes\n2\nGraduate\nYes\n5417\n4196\n267\n360\n1\nUrban\nY\n\n\n\n\n\n\nThe total number of rows:\n\nnrow(dt_loan)\n\n[1] 614\n\n\n\n\nAre there customers with similar IDs? If so which one or which ones?\n\nlength(unique(dt_loan$Loan_ID)) == nrow(dt_loan)\n\n[1] TRUE\n\n\n\n\nGender: Male/Female\n\ndt_loan %>%\ncount(Gender) %>%\nmutate(p = n / sum(n) * 100)\n\n  Gender   n         p\n1         13  2.117264\n2 Female 112 18.241042\n3   Male 489 79.641694\n\ndt_loan %>%\ncount(Gender) %>%\nggplot(aes(x = Gender, y = n, fill = Gender)) +\ngeom_col() +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\")\n\n\n\n\nThe gender of 13 customers is unknown. The majority of applicants are males.\nRemove 13 customers whose gender is unknown from the dataset.\n\ndt_loan <- dt_loan %>%\nfilter(Gender != \"\")\n\nnrow(dt_loan)\n\n[1] 601\n\n\n\n\nMarried: Applicant married (Y/N)\n\ndt_loan %>%\ncount(Married) %>%\nmutate(p = n / sum(n) * 100)\n\n  Married   n          p\n1           3  0.4991681\n2      No 210 34.9417637\n3     Yes 388 64.5590682\n\ndt_loan %>%\ncount(Married) %>%\nggplot(aes(x = Married, y = n, fill = Married)) +\ngeom_col() +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\")\n\n\n\n\nIt is unknown whether the 3 customers are married. One-third of those who apply are married.\nRemove 3 customers whose marital status is unknown from the dataset.\n\ndt_loan <- dt_loan %>%\nfilter(Married != \"\")\n\nnrow(dt_loan)\n\n[1] 598\n\n\n\n\nDependents: Number of dependents\n\ndt_loan %>%\ncount(Dependents) %>%\nmutate(p = n / sum(n) * 100)\n\n  Dependents   n         p\n1             12  2.006689\n2          0 338 56.521739\n3          1 101 16.889632\n4          2  99 16.555184\n5         3+  48  8.026756\n\ndt_loan %>%\ncount(Dependents) %>%\nggplot(aes(x = Dependents, y = n, fill = Dependents)) +\ngeom_col() +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\")\n\n\n\n\nThe dependent information of 12 customers is unknown. A little more than half of those who applied have no dependents.\nRemove 12 customers who do not have information about their dependents from the data set.\n\ndt_loan <- dt_loan %>%\nfilter(Dependents != \"\")\n\nnrow(dt_loan)\n\n[1] 586\n\n\n\n\nEducation: Applicant Education (Graduate/Under Graduate)\n\ndt_loan %>%\ncount(Education) %>%\nmutate(p = n / sum(n) * 100)\n\n     Education   n        p\n1     Graduate 457 77.98635\n2 Not Graduate 129 22.01365\n\ndt_loan %>%\ncount(Education) %>%\nggplot(aes(x = Education, y = n, fill = Education)) +\ngeom_col() +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\")\n\n\n\n\nIn this category, all customers have educational information. Most applicants hold graduate degrees.\n\n\nSelf_Employed: Self employed (Y/N)\n\ndt_loan %>%\ncount(Self_Employed) %>%\nmutate(p = n / sum(n) * 100)\n\n  Self_Employed   n         p\n1                32  5.460751\n2            No 478 81.569966\n3           Yes  76 12.969283\n\ndt_loan %>%\ncount(Self_Employed) %>%\nggplot(aes(x = Self_Employed, y = n, fill = Self_Employed)) +\ngeom_col() +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\")\n\n\n\n\nThere is no information on whether 32 customers are self-employed. The vast majority of applicants are not self-employed.\nRemove 32 customers from the dataset, whether or not they are self-employed.\n\ndt_loan <- dt_loan %>%\nfilter(Self_Employed != \"\")\n\nnrow(dt_loan)\n\n[1] 554\n\n\n\n\nApplicantIncome: Applicant income\n\ndt_loan %>%\nsummarise(\n  min = min(ApplicantIncome),\n  max = max(ApplicantIncome),\n  mean = mean(ApplicantIncome),\n  median = median(ApplicantIncome),\n  sd = sd(ApplicantIncome)\n)\n\n  min   max    mean median       sd\n1 150 81000 5267.06 3839.5 5455.163\n\nggplot(dt_loan, aes(x = ApplicantIncome)) +\ngeom_histogram(aes(y = ..density..), fill = \"orange\") +\ngeom_density(size = 1) +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\") +\ntheme(axis.text.y = element_blank())\n\n\n\n\n\n\nCoapplicantIncome: Coapplicant income\n\ndt_loan %>%\nsummarise(\n  min = min(CoapplicantIncome),\n  max = max(CoapplicantIncome),\n  mean = mean(CoapplicantIncome),\n  median = median(CoapplicantIncome),\n  sd = sd(CoapplicantIncome)\n)\n\n  min   max     mean median       sd\n1   0 33837 1585.576   1149 2524.485\n\nggplot(dt_loan, aes(x = CoapplicantIncome)) +\ngeom_histogram(aes(y = ..density..), fill = \"orange\") +\ngeom_density(size = 1) +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\") +\ntheme(axis.text.y = element_blank())\n\n\n\n\n\n\nLoanAmount: Loan amount in thousands\n\ndt_loan %>%\nsummarise(\n  min = min(LoanAmount),\n  max = max(LoanAmount),\n  mean = mean(LoanAmount),\n  median = median(LoanAmount),\n  sd = sd(LoanAmount)\n)\n\n  min max mean median sd\n1  NA  NA   NA     NA NA\n\nggplot(dt_loan, aes(x = LoanAmount)) +\ngeom_histogram(aes(y = ..density..), fill = \"orange\") +\ngeom_density(size = 1) +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\") +\ntheme(axis.text.y = element_blank())\n\n\n\n\nWe are unable to calculate summary statistics because some customers do not have a LoanAmount.\n\ndt_loan <- dt_loan %>%\nfilter(LoanAmount != \"\")\n\ndt_loan %>%\nsummarise(\n  min = min(LoanAmount),\n  max = max(LoanAmount),\n  mean = mean(LoanAmount),\n  median = median(LoanAmount),\n  sd = sd(LoanAmount)\n)\n\n  min max     mean median       sd\n1   9 650 144.9178    127 82.50775\n\nnrow(dt_loan)\n\n[1] 535\n\n\n\n\nLoan_Amount_Term: Term of loan in months\n\ndt_loan %>%\ncount(Loan_Amount_Term) %>%\nmutate(p = n / sum(n) * 100)\n\n   Loan_Amount_Term   n          p\n1                12   1  0.1869159\n2                36   2  0.3738318\n3                60   2  0.3738318\n4                84   4  0.7476636\n5               120   3  0.5607477\n6               180  36  6.7289720\n7               240   3  0.5607477\n8               300  12  2.2429907\n9               360 447 83.5514019\n10              480  13  2.4299065\n11               NA  12  2.2429907\n\ndt_loan %>%\ncount(Loan_Amount_Term) %>%\nggplot(aes(x = Loan_Amount_Term, y = n, fill = Loan_Amount_Term)) +\ngeom_col() +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\")\n\n\n\n\n12 customers do not have Loan_Amount_Term information.\n\ndt_loan <- dt_loan %>%\nfilter(!is.na(Loan_Amount_Term))\n\nnrow(dt_loan)\n\n[1] 523\n\n\n\n\nCredit_History: Credit history meets guidelines\n\ndt_loan %>%\ncount(Credit_History) %>%\nmutate(p = n / sum(n) * 100)\n\n  Credit_History   n         p\n1              0  70 13.384321\n2              1 410 78.393881\n3             NA  43  8.221797\n\ndt_loan %>%\ncount(Credit_History) %>%\nggplot(aes(x = Credit_History, y = n, fill = Credit_History)) +\ngeom_col() +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\")\n\n\n\n\n\n\nProperty_Area: Urban/Semi Urban/Rural\n\ndt_loan %>%\ncount(Property_Area) %>%\nmutate(p = n / sum(n) * 100)\n\n  Property_Area   n        p\n1         Rural 153 29.25430\n2     Semiurban 205 39.19694\n3         Urban 165 31.54876\n\ndt_loan %>%\ncount(Property_Area) %>%\nggplot(aes(x = Property_Area, y = n, fill = Property_Area)) +\ngeom_col() +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\")\n\n\n\n\n\n\nLoan_Status: (Target) Loan approved (Y/N)\n\ndt_loan %>%\ncount(Loan_Status) %>%\nmutate(p = n / sum(n) * 100)\n\n  Loan_Status   n        p\n1           N 156 29.82792\n2           Y 367 70.17208\n\ndt_loan %>%\ncount(Loan_Status) %>%\nggplot(aes(x = Loan_Status, y = n, fill = Loan_Status)) +\ngeom_col() +\ntheme_fivethirtyeight() +\ntheme(legend.position = \"none\")"
  }
]